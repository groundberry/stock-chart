{"version":3,"sources":["SymbolForm.js","utils.js","StockChart.js","RangeButtons.js","App.js","serviceWorker.js","index.js"],"names":["SymbolForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","value","react_default","a","createElement","className","main","name","label","pattern","minLength","required","onChange","evt","target","Component","serverUrl","fetchData","_x","_x2","_fetchData","apply","arguments","_callee","symbol","range","url","response","regenerator_default","wrap","_context","prev","next","concat","fetch","sent","abrupt","json","stop","massageData","obj","Date","date","Open","open","Close","close","Low","low","High","high","CustomStockChart","data","massagedData","map","from","to","length","es_main","text","company","type","openField","closeField","lowField","highField","categoryField","field","RangeButtons","handleClickOneMonth","handleClick","handleClickThreeMonths","handleClickSixMonths","handleClickOneYear","handleClickTwoYears","handleClickFiveYears","dist_es_main","title","togglable","selected","onClick","App","state","stockData","handleChangeSymbol","handleClickRange","updateStockData","_this$state","quote","companyName","undefined","chartData","chart","src_SymbolForm","src_RangeButtons_0","StockChart","href","setState","console","error","t0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9814e133.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input } from \"@progress/kendo-react-inputs\";\n\nclass SymbolForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <form className=\"k-form\">\n        <Input\n          name=\"symbol\"\n          label=\"Company's symbol\"\n          pattern={\"[A-Za-z-]+\"}\n          minLength={1}\n          required={true}\n          value={value}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n\n  handleChange(evt) {\n    const { onChange } = this.props;\n    const symbol = evt.target.value;\n    onChange(symbol);\n  }\n}\n\nexport default SymbolForm;\n","const serverUrl = \"https://stock-chart-proxy.herokuapp.com/\";\n\nexport async function fetchData(symbol, range) {\n  const url = `${serverUrl}?symbol=${symbol}&range=${range}`;\n\n  const response = await fetch(url);\n  return response.json();\n}\n\nexport function massageData(obj) {\n  return {\n    Date: new Date(obj.date),\n    Open: obj.open,\n    Close: obj.close,\n    Low: obj.low,\n    High: obj.high,\n  };\n}\n","import React from \"react\";\nimport {\n  StockChart,\n  ChartTitle,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartNavigator,\n  ChartNavigatorSelect,\n  ChartNavigatorSeries,\n  ChartNavigatorSeriesItem\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { massageData } from \"./utils\";\n\nconst CustomStockChart = props => {\n  const { data } = props;\n  const massagedData = data.map(massageData);\n\n  const from = new Date(data[0].date);\n  const to = new Date(data[data.length - 1].date);\n\n  return (\n    <StockChart>\n      <ChartTitle text={`${props.company} - ${props.symbol}`} />\n      <ChartSeries>\n        <ChartSeriesItem\n          data={massagedData}\n          type=\"candlestick\"\n          openField=\"Open\"\n          closeField=\"Close\"\n          lowField=\"Low\"\n          highField=\"High\"\n          categoryField=\"Date\"\n        />\n      </ChartSeries>\n      <ChartNavigator>\n        <ChartNavigatorSelect from={from} to={to} />\n        <ChartNavigatorSeries>\n          <ChartNavigatorSeriesItem\n            data={massagedData}\n            type=\"area\"\n            field=\"Close\"\n            categoryField=\"Date\"\n          />\n        </ChartNavigatorSeries>\n      </ChartNavigator>\n    </StockChart>\n  );\n};\n\nexport default CustomStockChart;\n","import React, { Component } from \"react\";\nimport { Button, ButtonGroup } from \"@progress/kendo-react-buttons\";\n\nimport \"./RangeButtons.css\";\n\nclass RangeButtons extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOneMonth = this.handleClick.bind(this, \"1m\");\n    this.handleClickThreeMonths = this.handleClick.bind(this, \"3m\");\n    this.handleClickSixMonths = this.handleClick.bind(this, \"6m\");\n    this.handleClickOneYear = this.handleClick.bind(this, \"1y\");\n    this.handleClickTwoYears = this.handleClick.bind(this, \"2y\");\n    this.handleClickFiveYears = this.handleClick.bind(this, \"5y\");\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <div className=\"RangeButtons\">\n        <ButtonGroup>\n          <Button\n            title=\"1 month\"\n            togglable={true}\n            selected={value === \"1m\"}\n            onClick={this.handleClickOneMonth}\n          >\n            1M\n          </Button>\n          <Button\n            title=\"3 months\"\n            togglable={true}\n            selected={value === \"3m\"}\n            onClick={this.handleClickThreeMonths}\n          >\n            3M\n          </Button>\n          <Button\n            title=\"6 months\"\n            togglable={true}\n            selected={value === \"6m\"}\n            onClick={this.handleClickSixMonths}\n          >\n            6M\n          </Button>\n          <Button\n            title=\"1 year\"\n            togglable={true}\n            selected={value === \"1y\"}\n            onClick={this.handleClickOneYear}\n          >\n            1Y\n          </Button>\n          <Button\n            title=\"2 years\"\n            togglable={true}\n            selected={value === \"2y\"}\n            onClick={this.handleClickTwoYears}\n          >\n            2Y\n          </Button>\n          <Button\n            title=\"5 years\"\n            togglable={true}\n            selected={value === \"5y\"}\n            onClick={this.handleClickFiveYears}\n          >\n            5Y\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n\n  handleClick(range) {\n    const { onClick } = this.props;\n    onClick(range);\n  }\n}\n\nexport default RangeButtons;\n","import React, { Component } from \"react\";\nimport SymbolForm from \"./SymbolForm\";\nimport StockChart from \"./StockChart\";\nimport RangeButtons from \"./RangeButtons\";\nimport { fetchData } from \"./utils\";\nimport \"@progress/kendo-theme-material/dist/all.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      symbol: \"\",\n      range: \"1m\",\n      stockData: {},\n    };\n\n    this.handleChangeSymbol = this.handleChangeSymbol.bind(this);\n    this.handleClickRange = this.handleClickRange.bind(this);\n    this.updateStockData = this.updateStockData.bind(this);\n  }\n\n  render() {\n    const { symbol, range, stockData } = this.state;\n\n    const company = stockData.quote ? stockData.quote.companyName : undefined;\n\n    const chartData = stockData.chart ? stockData.chart : undefined;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SymbolForm value={symbol} onChange={this.handleChangeSymbol} />\n          <RangeButtons value={range} onClick={this.handleClickRange} />\n        </header>\n        {symbol && company && chartData && (\n          <div className=\"App-chart\">\n            <StockChart symbol={symbol} company={company} data={chartData} />\n            <p>\n              Data provided for free by{\" \"}\n              <a href=\"https://iextrading.com/developer/\">IEX</a>. View{\" \"}\n              <a href=\"https://iextrading.com/api-exhibit-a/\">\n                IEX’s Terms of Use\n              </a>\n              .\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  handleChangeSymbol(symbol) {\n    this.setState({ symbol }, this.updateStockData);\n  }\n\n  handleClickRange(range) {\n    this.setState({ range }, this.updateStockData);\n  }\n\n  async updateStockData() {\n    const { symbol, range } = this.state;\n\n    if (!symbol || !range) {\n      return;\n    }\n\n    try {\n      const stockData = await fetchData(symbol, range);\n      this.setState({ stockData });\n    } catch (err) {\n      console.error(\"Could not fetch stock data:\", err);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}